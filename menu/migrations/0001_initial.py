# Generated by Django 5.2 on 2025-06-20 09:22

import django.core.validators
import django.db.models.deletion
import menu.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Burger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'бургер',
                'verbose_name_plural': 'Бургеры',
            },
        ),
        migrations.CreateModel(
            name='Dessert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'десерт',
                'verbose_name_plural': 'Десерты',
            },
        ),
        migrations.CreateModel(
            name='Drink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'напиток',
                'verbose_name_plural': 'Напитки',
            },
        ),
        migrations.CreateModel(
            name='Pizza',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'пиццу',
                'verbose_name_plural': 'Пиццы',
            },
        ),
        migrations.CreateModel(
            name='Salad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'салат',
                'verbose_name_plural': 'Салаты',
            },
        ),
        migrations.CreateModel(
            name='Snack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название блюда', max_length=100, unique=True, verbose_name='Название блюда')),
                ('description', models.TextField(blank=True, verbose_name='Описание блюда')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Цена должна быть положительной', max_digits=6, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Цена')),
                ('weight', models.PositiveBigIntegerField(default=0, help_text='Вес блюда в граммах', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Вес (г)')),
                ('image', models.ImageField(blank=True, help_text='Загрузите изображение блюда (разрешены: .jpg, .jpeg, .png; максимальный размер файла - 20 МБ)', null=True, upload_to='menu_images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), menu.models.validate_image_size, menu.models.validate_image_content], verbose_name='Изображение')),
                ('calories', models.PositiveBigIntegerField(default=0, help_text='Калорийность блюда в килокалориях', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Калорийность (ккал)')),
                ('proteins', models.DecimalField(decimal_places=1, default=0, help_text='Содержание белков в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Белки (г)')),
                ('fats', models.DecimalField(decimal_places=1, default=0, help_text='Содержание жиров в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Жиры (г)')),
                ('carbohydrates', models.DecimalField(decimal_places=1, default=0, help_text='Содержание углеводов в граммах', max_digits=4, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Углеводы (г)')),
            ],
            options={
                'verbose_name': 'снэк',
                'verbose_name_plural': 'Снэки',
            },
        ),
        migrations.CreateModel(
            name='Topping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название топпинга', max_length=100, unique=True, verbose_name='Название')),
                ('price_extra', models.DecimalField(decimal_places=2, default=0, help_text='Дополнительная стоимость топпинга (неотрицательная)', max_digits=5, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Доплата')),
            ],
            options={
                'verbose_name': 'топпинг',
                'verbose_name_plural': 'Топпинги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SnackTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.snack', verbose_name='Снэк')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг снэка',
                'verbose_name_plural': 'Топпинги снэков',
                'unique_together': {('item', 'topping')},
            },
        ),
        migrations.CreateModel(
            name='SaladTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.salad', verbose_name='Салат')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг салата',
                'verbose_name_plural': 'Топпинги салатов',
                'unique_together': {('item', 'topping')},
            },
        ),
        migrations.CreateModel(
            name='PizzaTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.pizza', verbose_name='Пицца')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг пиццы',
                'verbose_name_plural': 'Топпинги пицц',
                'unique_together': {('item', 'topping')},
            },
        ),
        migrations.CreateModel(
            name='DrinkTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.drink', verbose_name='Напиток')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг напитка',
                'verbose_name_plural': 'Топпинги напитков',
                'unique_together': {('item', 'topping')},
            },
        ),
        migrations.CreateModel(
            name='DessertTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.dessert', verbose_name='Десерт')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг десерта',
                'verbose_name_plural': 'Топпинги десертов',
                'unique_together': {('item', 'topping')},
            },
        ),
        migrations.CreateModel(
            name='BurgerTopping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toppings', to='menu.burger', verbose_name='Бургер')),
                ('topping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='menu.topping', verbose_name='Топпинг')),
            ],
            options={
                'verbose_name': 'топпинг бургера',
                'verbose_name_plural': 'Топпинги бургеров',
                'unique_together': {('item', 'topping')},
            },
        ),
    ]
